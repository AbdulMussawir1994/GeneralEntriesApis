// <auto-generated />
using System;
using GeneralEntries.ContextClass;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeneralEntries.Migrations
{
    [DbContext(typeof(DbContextClass))]
    [Migration("20240918142009_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeneralEntries.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e977b81-8b10-4bea-b18c-75b4495e7439",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4097dab3-5ac6-41fb-b64a-81ff0bc3e2c6",
                            DateCreated = new DateTime(2024, 9, 18, 14, 20, 5, 998, DateTimeKind.Utc).AddTicks(7692),
                            DateModified = new DateTime(2024, 9, 18, 14, 20, 5, 998, DateTimeKind.Utc).AddTicks(7695),
                            Email = "Abdul_mussawir@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "AbdulMussawir",
                            LastName = "Sheikh",
                            LockoutEnabled = false,
                            NormalizedEmail = "ABDUL_MUSSAWIR@HOTMAIL.COM",
                            NormalizedUserName = "ABDULMUSSAWIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEEyKE23rjw+WWAZevpmhOUxDYI10+im0REU1VsMEtbCyNW64YU0/mft8ECIuHRVuCA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "039352da-a42f-4bc0-8a25-7e540a473eb3",
                            TwoFactorEnabled = false,
                            UserName = "Abdul Mussawir"
                        },
                        new
                        {
                            Id = "a3f6a564-11ed-4727-b878-9932ce5d0f4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a049524-802a-4314-ba44-ea406842a689",
                            DateCreated = new DateTime(2024, 9, 18, 14, 20, 6, 63, DateTimeKind.Utc).AddTicks(5738),
                            DateModified = new DateTime(2024, 9, 18, 14, 20, 6, 63, DateTimeKind.Utc).AddTicks(5744),
                            Email = "Raheel@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Raheel",
                            LastName = "Sheikh",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAHEEL@HOTMAIL.COM",
                            NormalizedUserName = "RAHEEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEOZ6nSx+SYfPrITRE5bBS3KGS5akB41FmLTltst+rlTtqT+Ejo6u9FZ6JyuX7/KM8w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3f6a1751-3863-4233-bf19-d5e0ca5e6e86",
                            TwoFactorEnabled = false,
                            UserName = "Raheel"
                        },
                        new
                        {
                            Id = "37a286c2-e2f2-4ccc-9f9c-f8592b6af924",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bb30423-3db6-4d2a-80d0-ac8a43575d8a",
                            DateCreated = new DateTime(2024, 9, 18, 14, 20, 6, 126, DateTimeKind.Utc).AddTicks(2171),
                            DateModified = new DateTime(2024, 9, 18, 14, 20, 6, 126, DateTimeKind.Utc).AddTicks(2176),
                            Email = "Shehneela@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Shehneela",
                            LastName = "Khan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHEHNEELA@HOTMAIL.COM",
                            NormalizedUserName = "SHEHNEELA",
                            PasswordHash = "AQAAAAIAAYagAAAAEF51ioQQW8kkPKKbMnjwHL01zxNKnlTtJnrFZ55V7G97YSxYNEJ+oBP8iiSxHY1z2Q==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2f9a16c5-ae90-45be-861a-140f569de5be",
                            TwoFactorEnabled = false,
                            UserName = "Shehneela Khan"
                        },
                        new
                        {
                            Id = "0d887aff-dc9f-4903-bfe6-86c468d7db6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef6458c6-f23a-4303-9309-404d47295c4e",
                            DateCreated = new DateTime(2024, 9, 18, 14, 20, 6, 200, DateTimeKind.Utc).AddTicks(4998),
                            DateModified = new DateTime(2024, 9, 18, 14, 20, 6, 200, DateTimeKind.Utc).AddTicks(5003),
                            Email = "Salman@hotmail.com",
                            EmailConfirmed = false,
                            FirstName = "Salman",
                            LastName = "Khan",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALMAN@HOTMAIL.COM",
                            NormalizedUserName = "SALMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDUOmapXr4bOgnuWflx4bfBiWZwHg7MhNRmCOQ243ajRSF4L7NCsJughm5VajBOU6A==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "0fbee2d2-11fa-4d90-93fb-62b60517b2cc",
                            TwoFactorEnabled = false,
                            UserName = "Salman Khan"
                        });
                });

            modelBuilder.Entity("GeneralEntries.Models.ChartsofAccounts", b =>
                {
                    b.Property<int>("LedgerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LedgerId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CostCenter")
                        .HasColumnType("int");

                    b.Property<string>("HeadofAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LedgerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NatureofAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("LedgerId");

                    b.HasIndex("CompanyId");

                    b.ToTable("ChartsOfAccounts");
                });

            modelBuilder.Entity("GeneralEntries.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasFilter("[CompanyName] IS NOT NULL");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GeneralEntries.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Age = 29,
                            ApplicationUserId = "4e977b81-8b10-4bea-b18c-75b4495e7439",
                            EmployeeName = "Raheel",
                            Salary = 100000m
                        });
                });

            modelBuilder.Entity("GeneralEntries.Models.GeneralEntry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntryId"));

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<string>("CostCenter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GeneralVoucherId")
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelateCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelateLedger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntryId");

                    b.HasIndex("ChartId");

                    b.HasIndex("GeneralVoucherId");

                    b.ToTable("GeneralEntries");
                });

            modelBuilder.Entity("GeneralEntries.Models.GeneralVoucher", b =>
                {
                    b.Property<int>("GeneralVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralVoucherId"));

                    b.Property<DateTime>("Vdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Voucher")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralVoucherId");

                    b.ToTable("GeneralVouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12907185-2c80-4e90-b603-384a2c0a19c0",
                            ConcurrencyStamp = "e91dd84e-01a2-4902-86f5-724a185587b4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "85611d21-5abd-4aa3-88ef-fbbf55b16b94",
                            ConcurrencyStamp = "42d39c11-eb0c-4449-9d22-d1588b50b71d",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "cccfbda6-4b61-4781-93bf-e97a2d26a85b",
                            ConcurrencyStamp = "8e845b82-9000-4a82-8ad8-fb1c8b9fa760",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "bc7efa71-84dc-45ef-a38b-fa42aba10733",
                            ConcurrencyStamp = "885a06e4-d716-4aef-850e-2b86a42954c4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Admin",
                            ClaimValue = "Add Manager",
                            UserId = "4e977b81-8b10-4bea-b18c-75b4495e7439"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Admin",
                            ClaimValue = "Edit Manager",
                            UserId = "4e977b81-8b10-4bea-b18c-75b4495e7439"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Admin",
                            ClaimValue = "Delete Manager",
                            UserId = "4e977b81-8b10-4bea-b18c-75b4495e7439"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Admin",
                            ClaimValue = "Get Manager",
                            UserId = "4e977b81-8b10-4bea-b18c-75b4495e7439"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Manager",
                            ClaimValue = "Add Employee",
                            UserId = "a3f6a564-11ed-4727-b878-9932ce5d0f4e"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Manager",
                            ClaimValue = "Edit Employee",
                            UserId = "a3f6a564-11ed-4727-b878-9932ce5d0f4e"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Manager",
                            ClaimValue = "Delete Employee",
                            UserId = "a3f6a564-11ed-4727-b878-9932ce5d0f4e"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Manager",
                            ClaimValue = "Get Employee",
                            UserId = "a3f6a564-11ed-4727-b878-9932ce5d0f4e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4e977b81-8b10-4bea-b18c-75b4495e7439",
                            RoleId = "12907185-2c80-4e90-b603-384a2c0a19c0"
                        },
                        new
                        {
                            UserId = "a3f6a564-11ed-4727-b878-9932ce5d0f4e",
                            RoleId = "85611d21-5abd-4aa3-88ef-fbbf55b16b94"
                        },
                        new
                        {
                            UserId = "37a286c2-e2f2-4ccc-9f9c-f8592b6af924",
                            RoleId = "cccfbda6-4b61-4781-93bf-e97a2d26a85b"
                        },
                        new
                        {
                            UserId = "0d887aff-dc9f-4903-bfe6-86c468d7db6d",
                            RoleId = "bc7efa71-84dc-45ef-a38b-fa42aba10733"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GeneralEntries.Models.ChartsofAccounts", b =>
                {
                    b.HasOne("GeneralEntries.Models.Company", "Company")
                        .WithMany("Charts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("GeneralEntries.Models.Company", b =>
                {
                    b.HasOne("GeneralEntries.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GeneralEntries.Models.Employee", b =>
                {
                    b.HasOne("GeneralEntries.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Employees")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GeneralEntries.Models.GeneralEntry", b =>
                {
                    b.HasOne("GeneralEntries.Models.ChartsofAccounts", "Chart")
                        .WithMany("AllEntries")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralEntries.Models.GeneralVoucher", "GeneralVoucher")
                        .WithMany("GenEntries")
                        .HasForeignKey("GeneralVoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");

                    b.Navigation("GeneralVoucher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GeneralEntries.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GeneralEntries.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeneralEntries.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GeneralEntries.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneralEntries.Models.ApplicationUser", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("GeneralEntries.Models.ChartsofAccounts", b =>
                {
                    b.Navigation("AllEntries");
                });

            modelBuilder.Entity("GeneralEntries.Models.Company", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("GeneralEntries.Models.GeneralVoucher", b =>
                {
                    b.Navigation("GenEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
